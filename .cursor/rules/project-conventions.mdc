---
description:
globs:
alwaysApply: false
---
This rule serves as high-level documentation for how the codebase is structured.

## Rules for AI

- Use this file to understand how the codebase works
- Treat this rule/file as your "source of truth" when making code recommendations
- When creating migrations, always use `dm makemigrations` instead of creating the file yourself

## Project Tech Stack

- Web framework: Django
  - Django's built-in testing framework
  - Django Ninja for API development
  - Django Q2 for background tasks
  - Stimulus JS for frontend interactivity
  - TailwindCSS for styles
- Database: PostgreSQL
- Background tasks: Django Q2
- External
  - Payments: Stripe
  - [Other external services your project uses]

## Project conventions

These conventions should be used when writing code for the project.

### Convention 1: Minimize dependencies, vanilla Django is plenty

Dependencies are a natural part of building software, but we aim to minimize them when possible to keep this codebase easy to understand, maintain, and contribute to.

- Push Django to its limits before adding new dependencies
- When a new dependency is added, there must be a strong technical or business reason to add it
- When adding dependencies, you should favor old and reliable over new and flashy

### Convention 2: Leverage models and mixins over separate service layers

This codebase adopts a "skinny views, fat models" convention following Django's MVT pattern. We put business logic in models and avoid separate folders for business logic.

- Organize large pieces of business logic into Django models and mixins
- While a mixin _may_ offer shared functionality, it can also be a "one-off" mixin that is only included in one place for better organization and readability
- When mixins are used for code organization, they should be organized around the "traits" of a model; not for simply moving code to another spot in the codebase
- When possible, models should answer questions about themselvesâ€”for example, we might have a method, `account.balance_series` that returns a time-series of the account's most recent balances

### Convention 3: Prefer server-side solutions over client-side solutions

- When possible, leverage Django templates over complex, JS-driven client-side solutions
- When writing a client-side solution, use Stimulus controllers and keep it simple!
- Keep client-side code for where it truly shines. For example, bulk selection is a case where server-side solutions would degrade the user experience significantly

### Convention 4: Sacrifice performance, optimize for simplicitly and clarity

This codebase is still young. We are still rapidly iterating on domain designs and features. Because of this, code should be optimized for simplicitly and clarity over performance.

- Focus on good OOP design first, performance second
- Be mindful of large performance bottlenecks, but don't sweat the small stuff

### Convention 5: Prefer semantic, native HTML features

The HTML spec has improved tremendously over the years and offers a ton of functionality out of the box. We prefer semantic, native HTML solutions over JS-based ones. A few examples of this include:

- Using the `dialog` element for modals
- Using `summary` / `details` elements for disclosures (or `popover` attribute)

Stimulus works very well with these native elements and we optimize for this.

### Convention 6: Use Django's testing framework and fixtures

Due to the open-source nature of this project, we have chosen Django's testing framework and fixtures for testing to maximize familiarity and predictability.

- Always use Django's testing framework and fixtures for testing
- Keep fixtures to a minimum. Most models should have 2-3 fixtures maximum that represent the "base cases" for that model
- "Edge cases" should be created on the fly, within the context of the test which it is needed
- For tests that require a large number of fixture records to be created, use test helpers to act as a "factory" for creating these

### Convention 7: Use Django models for complex validations, DB for simple ones, keep business logic out of DB

- Enforce `null` checks, unique constraints, and other simple validations in the DB
- Django model validations _may_ mirror the DB level ones, but not 100% necessary
- These are for convenience when error handling in forms. Always prefer client-side form validation when possible
- Complex validations and business logic should remain in Django models
