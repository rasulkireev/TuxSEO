services:
  db:
    image: rasulkireev/custom-postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    env_file:
      - .env

  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    volumes:
      - redis_data:/data
    env_file:
      - .env

  backend:
    build:
      context: .
      dockerfile: Dockerfile-python
    working_dir: /app
    command: sh -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    volumes:
      - .:/app
    ports:
      - "8009:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      frontend:
        condition: service_started
    env_file:
      - .env

  workers:
    build:
      context: .
      dockerfile: Dockerfile-python
    working_dir: /app
    command: python manage.py qcluster
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    env_file:
      - .env

  frontend:
    image: node:18
    working_dir: /app
    command: sh -c "npm install && npm run start"
    volumes:
      - .:/app
    ports:
      - "9091:9091"

  mailhog:
    image: mailhog/mailhog
    expose:
      - 1025
      - 8025
    ports:
      - "1025:1025"
      - "8025:8025"
    restart: unless-stopped

  stripe:
    image: stripe/stripe-cli:latest
    command: [
      "listen",
      "-H", "x-djstripe-webhook-secret: ${DJSTRIPE_WEBHOOK_SECRET}",
      "--forward-to", "http://backend:8000/stripe/webhook/${WEBHOOK_UUID}/"
    ]
    environment:
      - STRIPE_API_KEY=${STRIPE_TEST_SECRET_KEY}
      - STRIPE_DEVICE_NAME=djstripe_docker
      - DJSTRIPE_WEBHOOK_SECRET=${DJSTRIPE_WEBHOOK_SECRET}
      - WEBHOOK_UUID=${WEBHOOK_UUID}
    dns:
      - 8.8.8.8
      - 8.8.4.4
    env_file:
      - .env

  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    environment:
      MINIO_ROOT_USER: seo_blog_bot
      MINIO_ROOT_PASSWORD: seo_blog_bot
    command: server --console-address ":9001" /data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 5s
      retries: 3

  createbuckets:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      sleep 5 &&
      /usr/bin/mc config host add myminio http://minio:9000 seo_blog_bot seo_blog_bot &&
      /usr/bin/mc mb myminio/seo-blog-bot-dev &&
      /usr/bin/mc anonymous set download myminio/seo-blog-bot-dev &&
      exit 0;
      "

volumes:
  postgres_data:
  redis_data:
  minio_data:
